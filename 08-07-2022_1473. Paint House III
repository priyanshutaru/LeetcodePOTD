There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.

For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].
Given an array houses, an m x n matrix cost and an integer target where:

houses[i]: is the color of the house i, and 0 if the house is not painted yet.
cost[i][j]: is the cost of paint the house i with the color j + 1.
Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.

 

Example 1:

Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].
Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.
Example 2:

Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]
This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. 
Cost of paint the first and last house (10 + 1) = 11.
Example 3:

Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.
 

Constraints:

m == houses.length == cost.length
n == cost[i].length
1 <= m <= 100
1 <= n <= 20
1 <= target <= m
0 <= houses[i] <= n
1 <= cost[i][j] <= 104


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@................Solution.....................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


class Solution {
    struct item_t {
        int color: 16;
        int min_cost: 24;
        int alt_cost: 24;
    };
public:
    int minCost(vector<int>& houses, vector<vector<int>>& costs, int m, int n, int target) {
        if (n == 1) return target == 1;
        constexpr int INVALID = 2e6;
        for (int &h: houses) --h; // now 0-based
        
        vector<item_t> dp(m), dp_next(m);
        vector<int> cost_by_color(n);
        
        for (int t = 0; t < target; ++t) {
            for (int h = t; h < m; ++h) {
                int existing_color = houses[h];
                pair<int,int> min1 = {-1, INVALID};
                pair<int,int> min2 = {-1, INVALID};
                
                for (int c = 0; c < n; ++c) {
                    // if the house is already painted another color
                    if (existing_color != -1 && existing_color != c) {
                        cost_by_color[c] = INVALID;
                        continue;
                    }
                    
                    // start a new neighborhood
                    int cost = (h == 0) ? 0 : INVALID;
                    if (t > 0) {
                        auto item = dp[h-1];
                        cost = (item.color == c) ? item.alt_cost : item.min_cost;
                    }
                    
                    // expand the current neighborhood
                    if (h > t) {
                        cost = min(cost, cost_by_color[c]);
                    }
                    
                    if (cost == INVALID) {
                        cost_by_color[c] = INVALID;
                        continue;
                    }
                    if (existing_color != c) {
                        cost += costs[h][c];
                    }
                    cost_by_color[c] = cost;
                    
                    // bubble up and keep the two best colors
                    pair<int,int> min3 = {c, cost};
                    if (min3.second < min2.second) {
                        swap(min3, min2);
                        if (min2.second < min1.second) {
                            swap(min2, min1);
                        }
                    }
                }
                
                dp_next[h] = {min1.first, min1.second, min2.second};
            }
            swap(dp, dp_next);
        }
        int min_cost = dp.back().min_cost;
        return (min_cost == INVALID) ? -1 : min_cost;
    }
};
