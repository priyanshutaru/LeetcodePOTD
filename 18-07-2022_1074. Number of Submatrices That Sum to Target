Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

 

Example 1:


Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.
Example 2:

Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
Example 3:

Input: matrix = [[904]], target = 0
Output: 0
 

Constraints:

1 <= matrix.length <= 100
1 <= matrix[0].length <= 100
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.................Solution.................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    int subarraySum(vector<int> &nums, int k){
        unordered_map<int,int> um;
        um[0] = 1;
        int curr = 0;
        int ans = 0;
        for(auto it: nums){    
            curr += it;
            int rem = curr-k;
            if(um.find(rem) != um.end()){
                ans += um[rem];
            }
            um[curr] += 1;
        }
        return ans;
    }
    
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int ans = 0;
		// Each iteration calculates the count for submatrix from row i to matrix.size()
        for(int i=0; i<matrix.size(); i++){
			// Sum stores the sum of the elements from row i to j 
            vector<int> sum(matrix[0].size(), 0);
            for(int j=i; j<matrix.size(); j++){
                for(int k=0; k<matrix[0].size(); k++){
                    sum[k] += matrix[j][k];
                }
				// Now calculate the count for the submatrix from row i to j
                ans += subarraySum(sum, target);
            }
        }
        
        return ans;
    }
};
