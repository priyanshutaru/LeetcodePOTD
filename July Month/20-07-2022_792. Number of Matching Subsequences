Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "abcde", words = ["a","bb","acd","ace"]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: "a", "acd", "ace".
Example 2:

Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
Output: 2
 

Constraints:

1 <= s.length <= 5 * 104
1 <= words.length <= 5000
1 <= words[i].length <= 50
s and words[i] consist of only lowercase English letters.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@..................Solution.................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2

struct Solution {
    
    char *s;
    int a[50002][27] = {[0 ... 50001] = {[0 ... 26] = -1}};
    int n;
    
    void init() {
        for (int i = n-1; i >= 0; --i) {
            for (int j = 1; j <= 26; ++j) {
                a[i][j] = a[i+1][j];
            }
            a[i][s[i]&31] = i;
        }
    }
    
    int numMatchingSubseq(string &s, vector<string>& w) {
        
        n = s.size();
        this->s = s.data();
        
        init();
        int ans = 0;
        
        for (auto &x : w) {
            int i = 0;
            for (auto c : x) {
                i = a[i][c&31];
                if (i == -1) {
                    ans -= 1;
                    break;
                }
                i += 1;
            }
            ans += 1;
        }
        
        return ans;
    }
};
