Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....................Solution......................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@22

 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
if(head==NULL)return NULL;
ListNode* prev = NULL;
ListNode* nest = head;
ListNode* curr = head;

    while(curr)
    {
        nest=curr->next;
        curr->next = prev;
        prev = curr;
        curr = nest;
    }
    
    return prev;
    
}
ListNode* reverseBetween(ListNode* head, int l, int r) {
    
    
    int no = l;
    l--;
    r--;
    
   
    ListNode* left = NULL;
    ListNode* temp = head;
    while(l--)
    {
        left = temp;
        temp=temp->next;
        
    }
    
    
    ListNode* right = NULL;
    ListNode* temp2 = head;
    while(r--)
    {
        temp2=temp2->next;
    }
    right = temp2->next;
    temp2->next = NULL;
    
    
  
    ListNode* newhead = reverseList(temp);
    ListNode* temp3 = newhead;
    while(temp3->next)
    {

        temp3=temp3->next;
    }
    
    
   
    if(left!=NULL)
        left->next = newhead;
    temp3->next = right;
    
    if(no==1)return newhead;
    
    return head;
    
    
}
};
