Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 

Example 1:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true
Example 2:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= n, m <= 300
-109 <= matrix[i][j] <= 109
All the integers in each row are sorted in ascending order.
All the integers in each column are sorted in ascending order.
-109 <= target <= 109










@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@...............................Solution....................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@22

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int l = 0; // we will use this for checking the row
        int r = matrix[0].size()-1; // we will use this for checking the column
        while(l < matrix.size() and r >= 0){
            if(matrix[l][r] == target){
                return true;
            }else if(matrix[l][r] > target){
				/*
				because the element is bigger than the target, we have to decrese the actual column because the 
				target will be in a less column value. Everytime that the current value is bigger than the target we will
				go in the previous column.
				*/
                r--;
            }else if(matrix[l][r] < target){
				/*
				Now, because the target is bigger than matrix[l][r] means that the row is not correct, so we have to check
				row + 1, so everytime that the current value is lower than the target we will go in to the next row
				*/
                l++;
            }
        }
        return false;
    }
};
