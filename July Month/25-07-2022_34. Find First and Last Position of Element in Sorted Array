Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109








@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.....................Solution.......................@@@@@@@@@@@@@@@@@@@@@@@@@@@@22

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
    int left=0, right=nums.size()-1, first=-1, second=-1, n=nums.size();
        vector<int> res;
        
        while(left<=right)
        {
            int mid = right-(right-left)/2;
            if(nums[mid]<target)
                left=mid+1;
            else if(nums[mid]>target)
                right=mid-1;
            else
            {
                if(mid==0 || nums[mid-1]!=nums[mid])
                {
                    first=mid;
                    break;
                }
                else
                    right =mid-1; 
            }
        }
        
        left=0, right=n-1;
        while(left<=right)
        {
            int mid = right-(right-left)/2;
            if(nums[mid]<target)
                left=mid+1;
            else if(nums[mid]>target)
                right=mid-1;
            else
            {
                if(mid==n-1 || nums[mid+1]!=nums[mid])
                {
                    second=mid;
                    break;
                }
                else
                    left =mid+1; 
            }
        }
        res.push_back(first);
        res.push_back(second);
        return res;
    }
};
        
