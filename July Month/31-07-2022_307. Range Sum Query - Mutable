Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length
At most 3 * 104 calls will be made to update and sumRange.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@................Solution.............@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2

class NumArray {
public:
    vector<int> segment;
    vector<int> arr;
    NumArray(vector<int>& nums) {
        arr = nums;
        vector<int> temp(4 * nums.size() + 5);
        segment = temp;
        build(0, 0, nums.size() -1);
    }
    
    int build(int i, int start, int end) {
        if (start == end) {
            segment[i] = arr[start];
        } else {
            int mid = (start + end) / 2;
            segment[i] = build(i*2 +1, start, mid) + build(2*i+2, mid +1, end);
        }
        return segment[i];
    }
    
    void inc_sum(int i, int start, int end, int index, int val) {
        if (start == end) {
            segment[i] = val;
            arr[start] = val;
        } else {
            int mid = (start + end)/2;
            if (index<=mid) {
                inc_sum(i*2+1, start, mid, index, val);
            } else {
                inc_sum(i*2+2, mid+1, end, index, val);
            }
            
            segment[i] = segment[i*2+1] + segment[i*2+2];
        }
    }
    
    void update(int index, int val) {
        inc_sum(0, 0, arr.size()-1, index, val);
    }
    
    int get_sum(int i, int start, int end, int left, int right) {
        if (start > right || end < left) {
            return 0;
        }
        if (left <= start && right >= end) {
            return segment[i];
        }
        int mid = (start + end)/2;
        return get_sum(i*2+1, start, mid, left, right) + get_sum(i*2+2, mid+1, end, left, right);
        
    }
    
    int sumRange(int left, int right) {
        return get_sum(0, 0, arr.size() -1, left, right);
    }
};
