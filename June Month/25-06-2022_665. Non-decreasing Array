Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:

Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
 

Constraints:

n == nums.length
1 <= n <= 104
-105 <= nums[i] <= 105

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.........................Solution.......................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        bool result = false;
        
        for(int i=1;i<nums.size();i++){
            if(nums[i-1] > nums[i]){
                if(result) return false;
                
                if(i-2 >=0 && i != nums.size()-1 && nums[i-2] <= nums[i]){
                    result = true;
                    continue;
                }
                if(i+1 < nums.size() && i != 1 && nums[i+1] >= nums[i-1]){
                    result = true;
                    continue;
                }
                if(i == 1 || i == nums.size()-1){
                    result = true;
                    continue;
                }
                
                return false;
            }
        }
        
        return true;
        
    }
};
